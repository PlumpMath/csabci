// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: types/types.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tendermint.ABCI.Types {

  /// <summary>Holder for reflection information generated from types/types.proto</summary>
  public static partial class TypesReflection {

    #region Descriptor
    /// <summary>File descriptor for types/types.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TypesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChF0eXBlcy90eXBlcy5wcm90bxIVVGVuZGVybWludC5BQkNJLlR5cGVzIpQF",
            "CgdSZXF1ZXN0EjIKBGVjaG8YASABKAsyIi5UZW5kZXJtaW50LkFCQ0kuVHlw",
            "ZXMuUmVxdWVzdEVjaG9IABI0CgVmbHVzaBgCIAEoCzIjLlRlbmRlcm1pbnQu",
            "QUJDSS5UeXBlcy5SZXF1ZXN0Rmx1c2hIABIyCgRpbmZvGAMgASgLMiIuVGVu",
            "ZGVybWludC5BQkNJLlR5cGVzLlJlcXVlc3RJbmZvSAASPQoKc2V0X29wdGlv",
            "bhgEIAEoCzInLlRlbmRlcm1pbnQuQUJDSS5UeXBlcy5SZXF1ZXN0U2V0T3B0",
            "aW9uSAASPQoKZGVsaXZlcl90eBgFIAEoCzInLlRlbmRlcm1pbnQuQUJDSS5U",
            "eXBlcy5SZXF1ZXN0RGVsaXZlclR4SAASOQoIY2hlY2tfdHgYBiABKAsyJS5U",
            "ZW5kZXJtaW50LkFCQ0kuVHlwZXMuUmVxdWVzdENoZWNrVHhIABI2CgZjb21t",
            "aXQYByABKAsyJC5UZW5kZXJtaW50LkFCQ0kuVHlwZXMuUmVxdWVzdENvbW1p",
            "dEgAEjQKBXF1ZXJ5GAggASgLMiMuVGVuZGVybWludC5BQkNJLlR5cGVzLlJl",
            "cXVlc3RRdWVyeUgAEj0KCmluaXRfY2hhaW4YCSABKAsyJy5UZW5kZXJtaW50",
            "LkFCQ0kuVHlwZXMuUmVxdWVzdEluaXRDaGFpbkgAEj8KC2JlZ2luX2Jsb2Nr",
            "GAogASgLMiguVGVuZGVybWludC5BQkNJLlR5cGVzLlJlcXVlc3RCZWdpbkJs",
            "b2NrSAASOwoJZW5kX2Jsb2NrGAsgASgLMiYuVGVuZGVybWludC5BQkNJLlR5",
            "cGVzLlJlcXVlc3RFbmRCbG9ja0gAQgcKBXZhbHVlIh4KC1JlcXVlc3RFY2hv",
            "Eg8KB21lc3NhZ2UYASABKAkiDgoMUmVxdWVzdEZsdXNoIg0KC1JlcXVlc3RJ",
            "bmZvIi4KEFJlcXVlc3RTZXRPcHRpb24SCwoDa2V5GAEgASgJEg0KBXZhbHVl",
            "GAIgASgJIh4KEFJlcXVlc3REZWxpdmVyVHgSCgoCdHgYASABKAwiHAoOUmVx",
            "dWVzdENoZWNrVHgSCgoCdHgYASABKAwiSQoMUmVxdWVzdFF1ZXJ5EgwKBGRh",
            "dGEYASABKAwSDAoEcGF0aBgCIAEoCRIOCgZoZWlnaHQYAyABKAQSDQoFcHJv",
            "dmUYBCABKAgiDwoNUmVxdWVzdENvbW1pdCJIChBSZXF1ZXN0SW5pdENoYWlu",
            "EjQKCnZhbGlkYXRvcnMYASADKAsyIC5UZW5kZXJtaW50LkFCQ0kuVHlwZXMu",
            "VmFsaWRhdG9yIlAKEVJlcXVlc3RCZWdpbkJsb2NrEgwKBGhhc2gYASABKAwS",
            "LQoGaGVhZGVyGAIgASgLMh0uVGVuZGVybWludC5BQkNJLlR5cGVzLkhlYWRl",
            "ciIhCg9SZXF1ZXN0RW5kQmxvY2sSDgoGaGVpZ2h0GAEgASgEIt8FCghSZXNw",
            "b25zZRI9CglleGNlcHRpb24YASABKAsyKC5UZW5kZXJtaW50LkFCQ0kuVHlw",
            "ZXMuUmVzcG9uc2VFeGNlcHRpb25IABIzCgRlY2hvGAIgASgLMiMuVGVuZGVy",
            "bWludC5BQkNJLlR5cGVzLlJlc3BvbnNlRWNob0gAEjUKBWZsdXNoGAMgASgL",
            "MiQuVGVuZGVybWludC5BQkNJLlR5cGVzLlJlc3BvbnNlRmx1c2hIABIzCgRp",
            "bmZvGAQgASgLMiMuVGVuZGVybWludC5BQkNJLlR5cGVzLlJlc3BvbnNlSW5m",
            "b0gAEj4KCnNldF9vcHRpb24YBSABKAsyKC5UZW5kZXJtaW50LkFCQ0kuVHlw",
            "ZXMuUmVzcG9uc2VTZXRPcHRpb25IABI+CgpkZWxpdmVyX3R4GAYgASgLMigu",
            "VGVuZGVybWludC5BQkNJLlR5cGVzLlJlc3BvbnNlRGVsaXZlclR4SAASOgoI",
            "Y2hlY2tfdHgYByABKAsyJi5UZW5kZXJtaW50LkFCQ0kuVHlwZXMuUmVzcG9u",
            "c2VDaGVja1R4SAASNwoGY29tbWl0GAggASgLMiUuVGVuZGVybWludC5BQkNJ",
            "LlR5cGVzLlJlc3BvbnNlQ29tbWl0SAASNQoFcXVlcnkYCSABKAsyJC5UZW5k",
            "ZXJtaW50LkFCQ0kuVHlwZXMuUmVzcG9uc2VRdWVyeUgAEj4KCmluaXRfY2hh",
            "aW4YCiABKAsyKC5UZW5kZXJtaW50LkFCQ0kuVHlwZXMuUmVzcG9uc2VJbml0",
            "Q2hhaW5IABJACgtiZWdpbl9ibG9jaxgLIAEoCzIpLlRlbmRlcm1pbnQuQUJD",
            "SS5UeXBlcy5SZXNwb25zZUJlZ2luQmxvY2tIABI8CgllbmRfYmxvY2sYDCAB",
            "KAsyJy5UZW5kZXJtaW50LkFCQ0kuVHlwZXMuUmVzcG9uc2VFbmRCbG9ja0gA",
            "QgcKBXZhbHVlIiIKEVJlc3BvbnNlRXhjZXB0aW9uEg0KBWVycm9yGAEgASgJ",
            "Ih8KDFJlc3BvbnNlRWNobxIPCgdtZXNzYWdlGAEgASgJIg8KDVJlc3BvbnNl",
            "Rmx1c2giZQoMUmVzcG9uc2VJbmZvEgwKBGRhdGEYASABKAkSDwoHdmVyc2lv",
            "bhgCIAEoCRIZChFsYXN0X2Jsb2NrX2hlaWdodBgDIAEoBBIbChNsYXN0X2Js",
            "b2NrX2FwcF9oYXNoGAQgASgMIiAKEVJlc3BvbnNlU2V0T3B0aW9uEgsKA2xv",
            "ZxgBIAEoCSJdChFSZXNwb25zZURlbGl2ZXJUeBItCgRjb2RlGAEgASgOMh8u",
            "VGVuZGVybWludC5BQkNJLlR5cGVzLkNvZGVUeXBlEgwKBGRhdGEYAiABKAwS",
            "CwoDbG9nGAMgASgJIlsKD1Jlc3BvbnNlQ2hlY2tUeBItCgRjb2RlGAEgASgO",
            "Mh8uVGVuZGVybWludC5BQkNJLlR5cGVzLkNvZGVUeXBlEgwKBGRhdGEYAiAB",
            "KAwSCwoDbG9nGAMgASgJIpUBCg1SZXNwb25zZVF1ZXJ5Ei0KBGNvZGUYASAB",
            "KA4yHy5UZW5kZXJtaW50LkFCQ0kuVHlwZXMuQ29kZVR5cGUSDQoFaW5kZXgY",
            "AiABKAMSCwoDa2V5GAMgASgMEg0KBXZhbHVlGAQgASgMEg0KBXByb29mGAUg",
            "ASgMEg4KBmhlaWdodBgGIAEoBBILCgNsb2cYByABKAkiWgoOUmVzcG9uc2VD",
            "b21taXQSLQoEY29kZRgBIAEoDjIfLlRlbmRlcm1pbnQuQUJDSS5UeXBlcy5D",
            "b2RlVHlwZRIMCgRkYXRhGAIgASgMEgsKA2xvZxgDIAEoCSITChFSZXNwb25z",
            "ZUluaXRDaGFpbiIUChJSZXNwb25zZUJlZ2luQmxvY2siQwoQUmVzcG9uc2VF",
            "bmRCbG9jaxIvCgVkaWZmcxgBIAMoCzIgLlRlbmRlcm1pbnQuQUJDSS5UeXBl",
            "cy5WYWxpZGF0b3Ii2AEKBkhlYWRlchIQCghjaGFpbl9pZBgBIAEoCRIOCgZo",
            "ZWlnaHQYAiABKAQSDAoEdGltZRgDIAEoBBIPCgdudW1fdHhzGAQgASgEEjUK",
            "DWxhc3RfYmxvY2tfaWQYBSABKAsyHi5UZW5kZXJtaW50LkFCQ0kuVHlwZXMu",
            "QmxvY2tJRBIYChBsYXN0X2NvbW1pdF9oYXNoGAYgASgMEhEKCWRhdGFfaGFz",
            "aBgHIAEoDBIXCg92YWxpZGF0b3JzX2hhc2gYCCABKAwSEAoIYXBwX2hhc2gY",
            "CSABKAwiTAoHQmxvY2tJRBIMCgRoYXNoGAEgASgMEjMKBXBhcnRzGAIgASgL",
            "MiQuVGVuZGVybWludC5BQkNJLlR5cGVzLlBhcnRTZXRIZWFkZXIiLAoNUGFy",
            "dFNldEhlYWRlchINCgV0b3RhbBgBIAEoBBIMCgRoYXNoGAIgASgMIioKCVZh",
            "bGlkYXRvchIOCgZwdWJLZXkYASABKAwSDQoFcG93ZXIYAiABKAQqtQUKCENv",
            "ZGVUeXBlEgYKAk9LEAASEQoNSW50ZXJuYWxFcnJvchABEhEKDUVuY29kaW5n",
            "RXJyb3IQAhIMCghCYWROb25jZRADEhAKDFVuYXV0aG9yaXplZBAEEhUKEUlu",
            "c3VmZmljaWVudEZ1bmRzEAUSEgoOVW5rbm93blJlcXVlc3QQBhIYChRCYXNl",
            "RHVwbGljYXRlQWRkcmVzcxBlEhUKEUJhc2VFbmNvZGluZ0Vycm9yEGYSGAoU",
            "QmFzZUluc3VmZmljaWVudEZlZXMQZxIZChVCYXNlSW5zdWZmaWNpZW50RnVu",
            "ZHMQaBIcChhCYXNlSW5zdWZmaWNpZW50R2FzUHJpY2UQaRIUChBCYXNlSW52",
            "YWxpZElucHV0EGoSFQoRQmFzZUludmFsaWRPdXRwdXQQaxIVChFCYXNlSW52",
            "YWxpZFB1YktleRBsEhcKE0Jhc2VJbnZhbGlkU2VxdWVuY2UQbRIYChRCYXNl",
            "SW52YWxpZFNpZ25hdHVyZRBuEhYKEkJhc2VVbmtub3duQWRkcmVzcxBvEhUK",
            "EUJhc2VVbmtub3duUHViS2V5EHASFQoRQmFzZVVua25vd25QbHVnaW4QcRIV",
            "ChBHb3ZVbmtub3duRW50aXR5EMkBEhQKD0dvdlVua25vd25Hcm91cBDKARIX",
            "ChJHb3ZVbmtub3duUHJvcG9zYWwQywESFgoRR292RHVwbGljYXRlR3JvdXAQ",
            "zAESFwoSR292RHVwbGljYXRlTWVtYmVyEM0BEhkKFEdvdkR1cGxpY2F0ZVBy",
            "b3Bvc2FsEM4BEhUKEEdvdkR1cGxpY2F0ZVZvdGUQzwESFQoQR292SW52YWxp",
            "ZE1lbWJlchDQARITCg5Hb3ZJbnZhbGlkVm90ZRDRARIaChVHb3ZJbnZhbGlk",
            "Vm90aW5nUG93ZXIQ0gEy7AcKD0FCQ0lBcHBsaWNhdGlvbhJPCgRFY2hvEiIu",
            "VGVuZGVybWludC5BQkNJLlR5cGVzLlJlcXVlc3RFY2hvGiMuVGVuZGVybWlu",
            "dC5BQkNJLlR5cGVzLlJlc3BvbnNlRWNobxJSCgVGbHVzaBIjLlRlbmRlcm1p",
            "bnQuQUJDSS5UeXBlcy5SZXF1ZXN0Rmx1c2gaJC5UZW5kZXJtaW50LkFCQ0ku",
            "VHlwZXMuUmVzcG9uc2VGbHVzaBJPCgRJbmZvEiIuVGVuZGVybWludC5BQkNJ",
            "LlR5cGVzLlJlcXVlc3RJbmZvGiMuVGVuZGVybWludC5BQkNJLlR5cGVzLlJl",
            "c3BvbnNlSW5mbxJeCglTZXRPcHRpb24SJy5UZW5kZXJtaW50LkFCQ0kuVHlw",
            "ZXMuUmVxdWVzdFNldE9wdGlvbhooLlRlbmRlcm1pbnQuQUJDSS5UeXBlcy5S",
            "ZXNwb25zZVNldE9wdGlvbhJeCglEZWxpdmVyVHgSJy5UZW5kZXJtaW50LkFC",
            "Q0kuVHlwZXMuUmVxdWVzdERlbGl2ZXJUeBooLlRlbmRlcm1pbnQuQUJDSS5U",
            "eXBlcy5SZXNwb25zZURlbGl2ZXJUeBJYCgdDaGVja1R4EiUuVGVuZGVybWlu",
            "dC5BQkNJLlR5cGVzLlJlcXVlc3RDaGVja1R4GiYuVGVuZGVybWludC5BQkNJ",
            "LlR5cGVzLlJlc3BvbnNlQ2hlY2tUeBJSCgVRdWVyeRIjLlRlbmRlcm1pbnQu",
            "QUJDSS5UeXBlcy5SZXF1ZXN0UXVlcnkaJC5UZW5kZXJtaW50LkFCQ0kuVHlw",
            "ZXMuUmVzcG9uc2VRdWVyeRJVCgZDb21taXQSJC5UZW5kZXJtaW50LkFCQ0ku",
            "VHlwZXMuUmVxdWVzdENvbW1pdBolLlRlbmRlcm1pbnQuQUJDSS5UeXBlcy5S",
            "ZXNwb25zZUNvbW1pdBJeCglJbml0Q2hhaW4SJy5UZW5kZXJtaW50LkFCQ0ku",
            "VHlwZXMuUmVxdWVzdEluaXRDaGFpbhooLlRlbmRlcm1pbnQuQUJDSS5UeXBl",
            "cy5SZXNwb25zZUluaXRDaGFpbhJhCgpCZWdpbkJsb2NrEiguVGVuZGVybWlu",
            "dC5BQkNJLlR5cGVzLlJlcXVlc3RCZWdpbkJsb2NrGikuVGVuZGVybWludC5B",
            "QkNJLlR5cGVzLlJlc3BvbnNlQmVnaW5CbG9jaxJbCghFbmRCbG9jaxImLlRl",
            "bmRlcm1pbnQuQUJDSS5UeXBlcy5SZXF1ZXN0RW5kQmxvY2saJy5UZW5kZXJt",
            "aW50LkFCQ0kuVHlwZXMuUmVzcG9uc2VFbmRCbG9ja2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Tendermint.ABCI.Types.CodeType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tendermint.ABCI.Types.Request), global::Tendermint.ABCI.Types.Request.Parser, new[]{ "Echo", "Flush", "Info", "SetOption", "DeliverTx", "CheckTx", "Commit", "Query", "InitChain", "BeginBlock", "EndBlock" }, new[]{ "Value" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tendermint.ABCI.Types.RequestEcho), global::Tendermint.ABCI.Types.RequestEcho.Parser, new[]{ "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tendermint.ABCI.Types.RequestFlush), global::Tendermint.ABCI.Types.RequestFlush.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tendermint.ABCI.Types.RequestInfo), global::Tendermint.ABCI.Types.RequestInfo.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tendermint.ABCI.Types.RequestSetOption), global::Tendermint.ABCI.Types.RequestSetOption.Parser, new[]{ "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tendermint.ABCI.Types.RequestDeliverTx), global::Tendermint.ABCI.Types.RequestDeliverTx.Parser, new[]{ "Tx" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tendermint.ABCI.Types.RequestCheckTx), global::Tendermint.ABCI.Types.RequestCheckTx.Parser, new[]{ "Tx" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tendermint.ABCI.Types.RequestQuery), global::Tendermint.ABCI.Types.RequestQuery.Parser, new[]{ "Data", "Path", "Height", "Prove" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tendermint.ABCI.Types.RequestCommit), global::Tendermint.ABCI.Types.RequestCommit.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tendermint.ABCI.Types.RequestInitChain), global::Tendermint.ABCI.Types.RequestInitChain.Parser, new[]{ "Validators" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tendermint.ABCI.Types.RequestBeginBlock), global::Tendermint.ABCI.Types.RequestBeginBlock.Parser, new[]{ "Hash", "Header" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tendermint.ABCI.Types.RequestEndBlock), global::Tendermint.ABCI.Types.RequestEndBlock.Parser, new[]{ "Height" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tendermint.ABCI.Types.Response), global::Tendermint.ABCI.Types.Response.Parser, new[]{ "Exception", "Echo", "Flush", "Info", "SetOption", "DeliverTx", "CheckTx", "Commit", "Query", "InitChain", "BeginBlock", "EndBlock" }, new[]{ "Value" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tendermint.ABCI.Types.ResponseException), global::Tendermint.ABCI.Types.ResponseException.Parser, new[]{ "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tendermint.ABCI.Types.ResponseEcho), global::Tendermint.ABCI.Types.ResponseEcho.Parser, new[]{ "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tendermint.ABCI.Types.ResponseFlush), global::Tendermint.ABCI.Types.ResponseFlush.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tendermint.ABCI.Types.ResponseInfo), global::Tendermint.ABCI.Types.ResponseInfo.Parser, new[]{ "Data", "Version", "LastBlockHeight", "LastBlockAppHash" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tendermint.ABCI.Types.ResponseSetOption), global::Tendermint.ABCI.Types.ResponseSetOption.Parser, new[]{ "Log" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tendermint.ABCI.Types.ResponseDeliverTx), global::Tendermint.ABCI.Types.ResponseDeliverTx.Parser, new[]{ "Code", "Data", "Log" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tendermint.ABCI.Types.ResponseCheckTx), global::Tendermint.ABCI.Types.ResponseCheckTx.Parser, new[]{ "Code", "Data", "Log" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tendermint.ABCI.Types.ResponseQuery), global::Tendermint.ABCI.Types.ResponseQuery.Parser, new[]{ "Code", "Index", "Key", "Value", "Proof", "Height", "Log" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tendermint.ABCI.Types.ResponseCommit), global::Tendermint.ABCI.Types.ResponseCommit.Parser, new[]{ "Code", "Data", "Log" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tendermint.ABCI.Types.ResponseInitChain), global::Tendermint.ABCI.Types.ResponseInitChain.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tendermint.ABCI.Types.ResponseBeginBlock), global::Tendermint.ABCI.Types.ResponseBeginBlock.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tendermint.ABCI.Types.ResponseEndBlock), global::Tendermint.ABCI.Types.ResponseEndBlock.Parser, new[]{ "Diffs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tendermint.ABCI.Types.Header), global::Tendermint.ABCI.Types.Header.Parser, new[]{ "ChainId", "Height", "Time", "NumTxs", "LastBlockId", "LastCommitHash", "DataHash", "ValidatorsHash", "AppHash" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tendermint.ABCI.Types.BlockID), global::Tendermint.ABCI.Types.BlockID.Parser, new[]{ "Hash", "Parts" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tendermint.ABCI.Types.PartSetHeader), global::Tendermint.ABCI.Types.PartSetHeader.Parser, new[]{ "Total", "Hash" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tendermint.ABCI.Types.Validator), global::Tendermint.ABCI.Types.Validator.Parser, new[]{ "PubKey", "Power" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum CodeType {
    [pbr::OriginalName("OK")] Ok = 0,
    /// <summary>
    /// General response codes, 0 ~ 99
    /// </summary>
    [pbr::OriginalName("InternalError")] InternalError = 1,
    [pbr::OriginalName("EncodingError")] EncodingError = 2,
    [pbr::OriginalName("BadNonce")] BadNonce = 3,
    [pbr::OriginalName("Unauthorized")] Unauthorized = 4,
    [pbr::OriginalName("InsufficientFunds")] InsufficientFunds = 5,
    [pbr::OriginalName("UnknownRequest")] UnknownRequest = 6,
    /// <summary>
    /// Reserved for basecoin, 100 ~ 199
    /// </summary>
    [pbr::OriginalName("BaseDuplicateAddress")] BaseDuplicateAddress = 101,
    [pbr::OriginalName("BaseEncodingError")] BaseEncodingError = 102,
    [pbr::OriginalName("BaseInsufficientFees")] BaseInsufficientFees = 103,
    [pbr::OriginalName("BaseInsufficientFunds")] BaseInsufficientFunds = 104,
    [pbr::OriginalName("BaseInsufficientGasPrice")] BaseInsufficientGasPrice = 105,
    [pbr::OriginalName("BaseInvalidInput")] BaseInvalidInput = 106,
    [pbr::OriginalName("BaseInvalidOutput")] BaseInvalidOutput = 107,
    [pbr::OriginalName("BaseInvalidPubKey")] BaseInvalidPubKey = 108,
    [pbr::OriginalName("BaseInvalidSequence")] BaseInvalidSequence = 109,
    [pbr::OriginalName("BaseInvalidSignature")] BaseInvalidSignature = 110,
    [pbr::OriginalName("BaseUnknownAddress")] BaseUnknownAddress = 111,
    [pbr::OriginalName("BaseUnknownPubKey")] BaseUnknownPubKey = 112,
    [pbr::OriginalName("BaseUnknownPlugin")] BaseUnknownPlugin = 113,
    /// <summary>
    /// Reserved for governance, 200 ~ 299
    /// </summary>
    [pbr::OriginalName("GovUnknownEntity")] GovUnknownEntity = 201,
    [pbr::OriginalName("GovUnknownGroup")] GovUnknownGroup = 202,
    [pbr::OriginalName("GovUnknownProposal")] GovUnknownProposal = 203,
    [pbr::OriginalName("GovDuplicateGroup")] GovDuplicateGroup = 204,
    [pbr::OriginalName("GovDuplicateMember")] GovDuplicateMember = 205,
    [pbr::OriginalName("GovDuplicateProposal")] GovDuplicateProposal = 206,
    [pbr::OriginalName("GovDuplicateVote")] GovDuplicateVote = 207,
    [pbr::OriginalName("GovInvalidMember")] GovInvalidMember = 208,
    [pbr::OriginalName("GovInvalidVote")] GovInvalidVote = 209,
    [pbr::OriginalName("GovInvalidVotingPower")] GovInvalidVotingPower = 210,
  }

  #endregion

  #region Messages
  public sealed partial class Request : pb::IMessage<Request> {
    private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Request> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tendermint.ABCI.Types.TypesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request(Request other) : this() {
      switch (other.ValueCase) {
        case ValueOneofCase.Echo:
          Echo = other.Echo.Clone();
          break;
        case ValueOneofCase.Flush:
          Flush = other.Flush.Clone();
          break;
        case ValueOneofCase.Info:
          Info = other.Info.Clone();
          break;
        case ValueOneofCase.SetOption:
          SetOption = other.SetOption.Clone();
          break;
        case ValueOneofCase.DeliverTx:
          DeliverTx = other.DeliverTx.Clone();
          break;
        case ValueOneofCase.CheckTx:
          CheckTx = other.CheckTx.Clone();
          break;
        case ValueOneofCase.Commit:
          Commit = other.Commit.Clone();
          break;
        case ValueOneofCase.Query:
          Query = other.Query.Clone();
          break;
        case ValueOneofCase.InitChain:
          InitChain = other.InitChain.Clone();
          break;
        case ValueOneofCase.BeginBlock:
          BeginBlock = other.BeginBlock.Clone();
          break;
        case ValueOneofCase.EndBlock:
          EndBlock = other.EndBlock.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request Clone() {
      return new Request(this);
    }

    /// <summary>Field number for the "echo" field.</summary>
    public const int EchoFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tendermint.ABCI.Types.RequestEcho Echo {
      get { return valueCase_ == ValueOneofCase.Echo ? (global::Tendermint.ABCI.Types.RequestEcho) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Echo;
      }
    }

    /// <summary>Field number for the "flush" field.</summary>
    public const int FlushFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tendermint.ABCI.Types.RequestFlush Flush {
      get { return valueCase_ == ValueOneofCase.Flush ? (global::Tendermint.ABCI.Types.RequestFlush) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Flush;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tendermint.ABCI.Types.RequestInfo Info {
      get { return valueCase_ == ValueOneofCase.Info ? (global::Tendermint.ABCI.Types.RequestInfo) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Info;
      }
    }

    /// <summary>Field number for the "set_option" field.</summary>
    public const int SetOptionFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tendermint.ABCI.Types.RequestSetOption SetOption {
      get { return valueCase_ == ValueOneofCase.SetOption ? (global::Tendermint.ABCI.Types.RequestSetOption) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.SetOption;
      }
    }

    /// <summary>Field number for the "deliver_tx" field.</summary>
    public const int DeliverTxFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tendermint.ABCI.Types.RequestDeliverTx DeliverTx {
      get { return valueCase_ == ValueOneofCase.DeliverTx ? (global::Tendermint.ABCI.Types.RequestDeliverTx) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.DeliverTx;
      }
    }

    /// <summary>Field number for the "check_tx" field.</summary>
    public const int CheckTxFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tendermint.ABCI.Types.RequestCheckTx CheckTx {
      get { return valueCase_ == ValueOneofCase.CheckTx ? (global::Tendermint.ABCI.Types.RequestCheckTx) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.CheckTx;
      }
    }

    /// <summary>Field number for the "commit" field.</summary>
    public const int CommitFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tendermint.ABCI.Types.RequestCommit Commit {
      get { return valueCase_ == ValueOneofCase.Commit ? (global::Tendermint.ABCI.Types.RequestCommit) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Commit;
      }
    }

    /// <summary>Field number for the "query" field.</summary>
    public const int QueryFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tendermint.ABCI.Types.RequestQuery Query {
      get { return valueCase_ == ValueOneofCase.Query ? (global::Tendermint.ABCI.Types.RequestQuery) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Query;
      }
    }

    /// <summary>Field number for the "init_chain" field.</summary>
    public const int InitChainFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tendermint.ABCI.Types.RequestInitChain InitChain {
      get { return valueCase_ == ValueOneofCase.InitChain ? (global::Tendermint.ABCI.Types.RequestInitChain) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.InitChain;
      }
    }

    /// <summary>Field number for the "begin_block" field.</summary>
    public const int BeginBlockFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tendermint.ABCI.Types.RequestBeginBlock BeginBlock {
      get { return valueCase_ == ValueOneofCase.BeginBlock ? (global::Tendermint.ABCI.Types.RequestBeginBlock) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.BeginBlock;
      }
    }

    /// <summary>Field number for the "end_block" field.</summary>
    public const int EndBlockFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tendermint.ABCI.Types.RequestEndBlock EndBlock {
      get { return valueCase_ == ValueOneofCase.EndBlock ? (global::Tendermint.ABCI.Types.RequestEndBlock) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.EndBlock;
      }
    }

    private object value_;
    /// <summary>Enum of possible cases for the "value" oneof.</summary>
    public enum ValueOneofCase {
      None = 0,
      Echo = 1,
      Flush = 2,
      Info = 3,
      SetOption = 4,
      DeliverTx = 5,
      CheckTx = 6,
      Commit = 7,
      Query = 8,
      InitChain = 9,
      BeginBlock = 10,
      EndBlock = 11,
    }
    private ValueOneofCase valueCase_ = ValueOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueOneofCase ValueCase {
      get { return valueCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      valueCase_ = ValueOneofCase.None;
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Request);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Echo, other.Echo)) return false;
      if (!object.Equals(Flush, other.Flush)) return false;
      if (!object.Equals(Info, other.Info)) return false;
      if (!object.Equals(SetOption, other.SetOption)) return false;
      if (!object.Equals(DeliverTx, other.DeliverTx)) return false;
      if (!object.Equals(CheckTx, other.CheckTx)) return false;
      if (!object.Equals(Commit, other.Commit)) return false;
      if (!object.Equals(Query, other.Query)) return false;
      if (!object.Equals(InitChain, other.InitChain)) return false;
      if (!object.Equals(BeginBlock, other.BeginBlock)) return false;
      if (!object.Equals(EndBlock, other.EndBlock)) return false;
      if (ValueCase != other.ValueCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (valueCase_ == ValueOneofCase.Echo) hash ^= Echo.GetHashCode();
      if (valueCase_ == ValueOneofCase.Flush) hash ^= Flush.GetHashCode();
      if (valueCase_ == ValueOneofCase.Info) hash ^= Info.GetHashCode();
      if (valueCase_ == ValueOneofCase.SetOption) hash ^= SetOption.GetHashCode();
      if (valueCase_ == ValueOneofCase.DeliverTx) hash ^= DeliverTx.GetHashCode();
      if (valueCase_ == ValueOneofCase.CheckTx) hash ^= CheckTx.GetHashCode();
      if (valueCase_ == ValueOneofCase.Commit) hash ^= Commit.GetHashCode();
      if (valueCase_ == ValueOneofCase.Query) hash ^= Query.GetHashCode();
      if (valueCase_ == ValueOneofCase.InitChain) hash ^= InitChain.GetHashCode();
      if (valueCase_ == ValueOneofCase.BeginBlock) hash ^= BeginBlock.GetHashCode();
      if (valueCase_ == ValueOneofCase.EndBlock) hash ^= EndBlock.GetHashCode();
      hash ^= (int) valueCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (valueCase_ == ValueOneofCase.Echo) {
        output.WriteRawTag(10);
        output.WriteMessage(Echo);
      }
      if (valueCase_ == ValueOneofCase.Flush) {
        output.WriteRawTag(18);
        output.WriteMessage(Flush);
      }
      if (valueCase_ == ValueOneofCase.Info) {
        output.WriteRawTag(26);
        output.WriteMessage(Info);
      }
      if (valueCase_ == ValueOneofCase.SetOption) {
        output.WriteRawTag(34);
        output.WriteMessage(SetOption);
      }
      if (valueCase_ == ValueOneofCase.DeliverTx) {
        output.WriteRawTag(42);
        output.WriteMessage(DeliverTx);
      }
      if (valueCase_ == ValueOneofCase.CheckTx) {
        output.WriteRawTag(50);
        output.WriteMessage(CheckTx);
      }
      if (valueCase_ == ValueOneofCase.Commit) {
        output.WriteRawTag(58);
        output.WriteMessage(Commit);
      }
      if (valueCase_ == ValueOneofCase.Query) {
        output.WriteRawTag(66);
        output.WriteMessage(Query);
      }
      if (valueCase_ == ValueOneofCase.InitChain) {
        output.WriteRawTag(74);
        output.WriteMessage(InitChain);
      }
      if (valueCase_ == ValueOneofCase.BeginBlock) {
        output.WriteRawTag(82);
        output.WriteMessage(BeginBlock);
      }
      if (valueCase_ == ValueOneofCase.EndBlock) {
        output.WriteRawTag(90);
        output.WriteMessage(EndBlock);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (valueCase_ == ValueOneofCase.Echo) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Echo);
      }
      if (valueCase_ == ValueOneofCase.Flush) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Flush);
      }
      if (valueCase_ == ValueOneofCase.Info) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (valueCase_ == ValueOneofCase.SetOption) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SetOption);
      }
      if (valueCase_ == ValueOneofCase.DeliverTx) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeliverTx);
      }
      if (valueCase_ == ValueOneofCase.CheckTx) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CheckTx);
      }
      if (valueCase_ == ValueOneofCase.Commit) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Commit);
      }
      if (valueCase_ == ValueOneofCase.Query) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Query);
      }
      if (valueCase_ == ValueOneofCase.InitChain) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InitChain);
      }
      if (valueCase_ == ValueOneofCase.BeginBlock) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BeginBlock);
      }
      if (valueCase_ == ValueOneofCase.EndBlock) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndBlock);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Request other) {
      if (other == null) {
        return;
      }
      switch (other.ValueCase) {
        case ValueOneofCase.Echo:
          Echo = other.Echo;
          break;
        case ValueOneofCase.Flush:
          Flush = other.Flush;
          break;
        case ValueOneofCase.Info:
          Info = other.Info;
          break;
        case ValueOneofCase.SetOption:
          SetOption = other.SetOption;
          break;
        case ValueOneofCase.DeliverTx:
          DeliverTx = other.DeliverTx;
          break;
        case ValueOneofCase.CheckTx:
          CheckTx = other.CheckTx;
          break;
        case ValueOneofCase.Commit:
          Commit = other.Commit;
          break;
        case ValueOneofCase.Query:
          Query = other.Query;
          break;
        case ValueOneofCase.InitChain:
          InitChain = other.InitChain;
          break;
        case ValueOneofCase.BeginBlock:
          BeginBlock = other.BeginBlock;
          break;
        case ValueOneofCase.EndBlock:
          EndBlock = other.EndBlock;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Tendermint.ABCI.Types.RequestEcho subBuilder = new global::Tendermint.ABCI.Types.RequestEcho();
            if (valueCase_ == ValueOneofCase.Echo) {
              subBuilder.MergeFrom(Echo);
            }
            input.ReadMessage(subBuilder);
            Echo = subBuilder;
            break;
          }
          case 18: {
            global::Tendermint.ABCI.Types.RequestFlush subBuilder = new global::Tendermint.ABCI.Types.RequestFlush();
            if (valueCase_ == ValueOneofCase.Flush) {
              subBuilder.MergeFrom(Flush);
            }
            input.ReadMessage(subBuilder);
            Flush = subBuilder;
            break;
          }
          case 26: {
            global::Tendermint.ABCI.Types.RequestInfo subBuilder = new global::Tendermint.ABCI.Types.RequestInfo();
            if (valueCase_ == ValueOneofCase.Info) {
              subBuilder.MergeFrom(Info);
            }
            input.ReadMessage(subBuilder);
            Info = subBuilder;
            break;
          }
          case 34: {
            global::Tendermint.ABCI.Types.RequestSetOption subBuilder = new global::Tendermint.ABCI.Types.RequestSetOption();
            if (valueCase_ == ValueOneofCase.SetOption) {
              subBuilder.MergeFrom(SetOption);
            }
            input.ReadMessage(subBuilder);
            SetOption = subBuilder;
            break;
          }
          case 42: {
            global::Tendermint.ABCI.Types.RequestDeliverTx subBuilder = new global::Tendermint.ABCI.Types.RequestDeliverTx();
            if (valueCase_ == ValueOneofCase.DeliverTx) {
              subBuilder.MergeFrom(DeliverTx);
            }
            input.ReadMessage(subBuilder);
            DeliverTx = subBuilder;
            break;
          }
          case 50: {
            global::Tendermint.ABCI.Types.RequestCheckTx subBuilder = new global::Tendermint.ABCI.Types.RequestCheckTx();
            if (valueCase_ == ValueOneofCase.CheckTx) {
              subBuilder.MergeFrom(CheckTx);
            }
            input.ReadMessage(subBuilder);
            CheckTx = subBuilder;
            break;
          }
          case 58: {
            global::Tendermint.ABCI.Types.RequestCommit subBuilder = new global::Tendermint.ABCI.Types.RequestCommit();
            if (valueCase_ == ValueOneofCase.Commit) {
              subBuilder.MergeFrom(Commit);
            }
            input.ReadMessage(subBuilder);
            Commit = subBuilder;
            break;
          }
          case 66: {
            global::Tendermint.ABCI.Types.RequestQuery subBuilder = new global::Tendermint.ABCI.Types.RequestQuery();
            if (valueCase_ == ValueOneofCase.Query) {
              subBuilder.MergeFrom(Query);
            }
            input.ReadMessage(subBuilder);
            Query = subBuilder;
            break;
          }
          case 74: {
            global::Tendermint.ABCI.Types.RequestInitChain subBuilder = new global::Tendermint.ABCI.Types.RequestInitChain();
            if (valueCase_ == ValueOneofCase.InitChain) {
              subBuilder.MergeFrom(InitChain);
            }
            input.ReadMessage(subBuilder);
            InitChain = subBuilder;
            break;
          }
          case 82: {
            global::Tendermint.ABCI.Types.RequestBeginBlock subBuilder = new global::Tendermint.ABCI.Types.RequestBeginBlock();
            if (valueCase_ == ValueOneofCase.BeginBlock) {
              subBuilder.MergeFrom(BeginBlock);
            }
            input.ReadMessage(subBuilder);
            BeginBlock = subBuilder;
            break;
          }
          case 90: {
            global::Tendermint.ABCI.Types.RequestEndBlock subBuilder = new global::Tendermint.ABCI.Types.RequestEndBlock();
            if (valueCase_ == ValueOneofCase.EndBlock) {
              subBuilder.MergeFrom(EndBlock);
            }
            input.ReadMessage(subBuilder);
            EndBlock = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class RequestEcho : pb::IMessage<RequestEcho> {
    private static readonly pb::MessageParser<RequestEcho> _parser = new pb::MessageParser<RequestEcho>(() => new RequestEcho());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestEcho> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tendermint.ABCI.Types.TypesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestEcho() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestEcho(RequestEcho other) : this() {
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestEcho Clone() {
      return new RequestEcho(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestEcho);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestEcho other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestEcho other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RequestFlush : pb::IMessage<RequestFlush> {
    private static readonly pb::MessageParser<RequestFlush> _parser = new pb::MessageParser<RequestFlush>(() => new RequestFlush());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestFlush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tendermint.ABCI.Types.TypesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestFlush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestFlush(RequestFlush other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestFlush Clone() {
      return new RequestFlush(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestFlush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestFlush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestFlush other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class RequestInfo : pb::IMessage<RequestInfo> {
    private static readonly pb::MessageParser<RequestInfo> _parser = new pb::MessageParser<RequestInfo>(() => new RequestInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tendermint.ABCI.Types.TypesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestInfo(RequestInfo other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestInfo Clone() {
      return new RequestInfo(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestInfo other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class RequestSetOption : pb::IMessage<RequestSetOption> {
    private static readonly pb::MessageParser<RequestSetOption> _parser = new pb::MessageParser<RequestSetOption>(() => new RequestSetOption());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestSetOption> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tendermint.ABCI.Types.TypesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestSetOption() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestSetOption(RequestSetOption other) : this() {
      key_ = other.key_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestSetOption Clone() {
      return new RequestSetOption(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestSetOption);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestSetOption other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestSetOption other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RequestDeliverTx : pb::IMessage<RequestDeliverTx> {
    private static readonly pb::MessageParser<RequestDeliverTx> _parser = new pb::MessageParser<RequestDeliverTx>(() => new RequestDeliverTx());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestDeliverTx> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tendermint.ABCI.Types.TypesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestDeliverTx() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestDeliverTx(RequestDeliverTx other) : this() {
      tx_ = other.tx_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestDeliverTx Clone() {
      return new RequestDeliverTx(this);
    }

    /// <summary>Field number for the "tx" field.</summary>
    public const int TxFieldNumber = 1;
    private pb::ByteString tx_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Tx {
      get { return tx_; }
      set {
        tx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestDeliverTx);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestDeliverTx other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tx != other.Tx) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tx.Length != 0) hash ^= Tx.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tx.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Tx);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tx.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Tx);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestDeliverTx other) {
      if (other == null) {
        return;
      }
      if (other.Tx.Length != 0) {
        Tx = other.Tx;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Tx = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RequestCheckTx : pb::IMessage<RequestCheckTx> {
    private static readonly pb::MessageParser<RequestCheckTx> _parser = new pb::MessageParser<RequestCheckTx>(() => new RequestCheckTx());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestCheckTx> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tendermint.ABCI.Types.TypesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestCheckTx() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestCheckTx(RequestCheckTx other) : this() {
      tx_ = other.tx_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestCheckTx Clone() {
      return new RequestCheckTx(this);
    }

    /// <summary>Field number for the "tx" field.</summary>
    public const int TxFieldNumber = 1;
    private pb::ByteString tx_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Tx {
      get { return tx_; }
      set {
        tx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestCheckTx);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestCheckTx other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tx != other.Tx) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tx.Length != 0) hash ^= Tx.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tx.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Tx);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tx.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Tx);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestCheckTx other) {
      if (other == null) {
        return;
      }
      if (other.Tx.Length != 0) {
        Tx = other.Tx;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Tx = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RequestQuery : pb::IMessage<RequestQuery> {
    private static readonly pb::MessageParser<RequestQuery> _parser = new pb::MessageParser<RequestQuery>(() => new RequestQuery());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestQuery> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tendermint.ABCI.Types.TypesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestQuery() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestQuery(RequestQuery other) : this() {
      data_ = other.data_;
      path_ = other.path_;
      height_ = other.height_;
      prove_ = other.prove_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestQuery Clone() {
      return new RequestQuery(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 2;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 3;
    private ulong height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "prove" field.</summary>
    public const int ProveFieldNumber = 4;
    private bool prove_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Prove {
      get { return prove_; }
      set {
        prove_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestQuery);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestQuery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      if (Path != other.Path) return false;
      if (Height != other.Height) return false;
      if (Prove != other.Prove) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (Height != 0UL) hash ^= Height.GetHashCode();
      if (Prove != false) hash ^= Prove.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Data);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Path);
      }
      if (Height != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Height);
      }
      if (Prove != false) {
        output.WriteRawTag(32);
        output.WriteBool(Prove);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (Height != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Height);
      }
      if (Prove != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestQuery other) {
      if (other == null) {
        return;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.Height != 0UL) {
        Height = other.Height;
      }
      if (other.Prove != false) {
        Prove = other.Prove;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Data = input.ReadBytes();
            break;
          }
          case 18: {
            Path = input.ReadString();
            break;
          }
          case 24: {
            Height = input.ReadUInt64();
            break;
          }
          case 32: {
            Prove = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RequestCommit : pb::IMessage<RequestCommit> {
    private static readonly pb::MessageParser<RequestCommit> _parser = new pb::MessageParser<RequestCommit>(() => new RequestCommit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestCommit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tendermint.ABCI.Types.TypesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestCommit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestCommit(RequestCommit other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestCommit Clone() {
      return new RequestCommit(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestCommit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestCommit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestCommit other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class RequestInitChain : pb::IMessage<RequestInitChain> {
    private static readonly pb::MessageParser<RequestInitChain> _parser = new pb::MessageParser<RequestInitChain>(() => new RequestInitChain());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestInitChain> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tendermint.ABCI.Types.TypesReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestInitChain() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestInitChain(RequestInitChain other) : this() {
      validators_ = other.validators_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestInitChain Clone() {
      return new RequestInitChain(this);
    }

    /// <summary>Field number for the "validators" field.</summary>
    public const int ValidatorsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tendermint.ABCI.Types.Validator> _repeated_validators_codec
        = pb::FieldCodec.ForMessage(10, global::Tendermint.ABCI.Types.Validator.Parser);
    private readonly pbc::RepeatedField<global::Tendermint.ABCI.Types.Validator> validators_ = new pbc::RepeatedField<global::Tendermint.ABCI.Types.Validator>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tendermint.ABCI.Types.Validator> Validators {
      get { return validators_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestInitChain);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestInitChain other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!validators_.Equals(other.validators_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= validators_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      validators_.WriteTo(output, _repeated_validators_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += validators_.CalculateSize(_repeated_validators_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestInitChain other) {
      if (other == null) {
        return;
      }
      validators_.Add(other.validators_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            validators_.AddEntriesFrom(input, _repeated_validators_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RequestBeginBlock : pb::IMessage<RequestBeginBlock> {
    private static readonly pb::MessageParser<RequestBeginBlock> _parser = new pb::MessageParser<RequestBeginBlock>(() => new RequestBeginBlock());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestBeginBlock> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tendermint.ABCI.Types.TypesReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestBeginBlock() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestBeginBlock(RequestBeginBlock other) : this() {
      hash_ = other.hash_;
      Header = other.header_ != null ? other.Header.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestBeginBlock Clone() {
      return new RequestBeginBlock(this);
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 1;
    private pb::ByteString hash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Hash {
      get { return hash_; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 2;
    private global::Tendermint.ABCI.Types.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tendermint.ABCI.Types.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestBeginBlock);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestBeginBlock other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Hash != other.Hash) return false;
      if (!object.Equals(Header, other.Header)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      if (header_ != null) hash ^= Header.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Hash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Hash);
      }
      if (header_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Header);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
      }
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestBeginBlock other) {
      if (other == null) {
        return;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Tendermint.ABCI.Types.Header();
        }
        Header.MergeFrom(other.Header);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Hash = input.ReadBytes();
            break;
          }
          case 18: {
            if (header_ == null) {
              header_ = new global::Tendermint.ABCI.Types.Header();
            }
            input.ReadMessage(header_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RequestEndBlock : pb::IMessage<RequestEndBlock> {
    private static readonly pb::MessageParser<RequestEndBlock> _parser = new pb::MessageParser<RequestEndBlock>(() => new RequestEndBlock());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestEndBlock> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tendermint.ABCI.Types.TypesReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestEndBlock() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestEndBlock(RequestEndBlock other) : this() {
      height_ = other.height_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestEndBlock Clone() {
      return new RequestEndBlock(this);
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 1;
    private ulong height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestEndBlock);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestEndBlock other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Height != other.Height) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Height != 0UL) hash ^= Height.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Height != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Height);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Height != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Height);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestEndBlock other) {
      if (other == null) {
        return;
      }
      if (other.Height != 0UL) {
        Height = other.Height;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Height = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Response : pb::IMessage<Response> {
    private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tendermint.ABCI.Types.TypesReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response(Response other) : this() {
      switch (other.ValueCase) {
        case ValueOneofCase.Exception:
          Exception = other.Exception.Clone();
          break;
        case ValueOneofCase.Echo:
          Echo = other.Echo.Clone();
          break;
        case ValueOneofCase.Flush:
          Flush = other.Flush.Clone();
          break;
        case ValueOneofCase.Info:
          Info = other.Info.Clone();
          break;
        case ValueOneofCase.SetOption:
          SetOption = other.SetOption.Clone();
          break;
        case ValueOneofCase.DeliverTx:
          DeliverTx = other.DeliverTx.Clone();
          break;
        case ValueOneofCase.CheckTx:
          CheckTx = other.CheckTx.Clone();
          break;
        case ValueOneofCase.Commit:
          Commit = other.Commit.Clone();
          break;
        case ValueOneofCase.Query:
          Query = other.Query.Clone();
          break;
        case ValueOneofCase.InitChain:
          InitChain = other.InitChain.Clone();
          break;
        case ValueOneofCase.BeginBlock:
          BeginBlock = other.BeginBlock.Clone();
          break;
        case ValueOneofCase.EndBlock:
          EndBlock = other.EndBlock.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response Clone() {
      return new Response(this);
    }

    /// <summary>Field number for the "exception" field.</summary>
    public const int ExceptionFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tendermint.ABCI.Types.ResponseException Exception {
      get { return valueCase_ == ValueOneofCase.Exception ? (global::Tendermint.ABCI.Types.ResponseException) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Exception;
      }
    }

    /// <summary>Field number for the "echo" field.</summary>
    public const int EchoFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tendermint.ABCI.Types.ResponseEcho Echo {
      get { return valueCase_ == ValueOneofCase.Echo ? (global::Tendermint.ABCI.Types.ResponseEcho) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Echo;
      }
    }

    /// <summary>Field number for the "flush" field.</summary>
    public const int FlushFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tendermint.ABCI.Types.ResponseFlush Flush {
      get { return valueCase_ == ValueOneofCase.Flush ? (global::Tendermint.ABCI.Types.ResponseFlush) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Flush;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tendermint.ABCI.Types.ResponseInfo Info {
      get { return valueCase_ == ValueOneofCase.Info ? (global::Tendermint.ABCI.Types.ResponseInfo) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Info;
      }
    }

    /// <summary>Field number for the "set_option" field.</summary>
    public const int SetOptionFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tendermint.ABCI.Types.ResponseSetOption SetOption {
      get { return valueCase_ == ValueOneofCase.SetOption ? (global::Tendermint.ABCI.Types.ResponseSetOption) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.SetOption;
      }
    }

    /// <summary>Field number for the "deliver_tx" field.</summary>
    public const int DeliverTxFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tendermint.ABCI.Types.ResponseDeliverTx DeliverTx {
      get { return valueCase_ == ValueOneofCase.DeliverTx ? (global::Tendermint.ABCI.Types.ResponseDeliverTx) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.DeliverTx;
      }
    }

    /// <summary>Field number for the "check_tx" field.</summary>
    public const int CheckTxFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tendermint.ABCI.Types.ResponseCheckTx CheckTx {
      get { return valueCase_ == ValueOneofCase.CheckTx ? (global::Tendermint.ABCI.Types.ResponseCheckTx) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.CheckTx;
      }
    }

    /// <summary>Field number for the "commit" field.</summary>
    public const int CommitFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tendermint.ABCI.Types.ResponseCommit Commit {
      get { return valueCase_ == ValueOneofCase.Commit ? (global::Tendermint.ABCI.Types.ResponseCommit) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Commit;
      }
    }

    /// <summary>Field number for the "query" field.</summary>
    public const int QueryFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tendermint.ABCI.Types.ResponseQuery Query {
      get { return valueCase_ == ValueOneofCase.Query ? (global::Tendermint.ABCI.Types.ResponseQuery) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Query;
      }
    }

    /// <summary>Field number for the "init_chain" field.</summary>
    public const int InitChainFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tendermint.ABCI.Types.ResponseInitChain InitChain {
      get { return valueCase_ == ValueOneofCase.InitChain ? (global::Tendermint.ABCI.Types.ResponseInitChain) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.InitChain;
      }
    }

    /// <summary>Field number for the "begin_block" field.</summary>
    public const int BeginBlockFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tendermint.ABCI.Types.ResponseBeginBlock BeginBlock {
      get { return valueCase_ == ValueOneofCase.BeginBlock ? (global::Tendermint.ABCI.Types.ResponseBeginBlock) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.BeginBlock;
      }
    }

    /// <summary>Field number for the "end_block" field.</summary>
    public const int EndBlockFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tendermint.ABCI.Types.ResponseEndBlock EndBlock {
      get { return valueCase_ == ValueOneofCase.EndBlock ? (global::Tendermint.ABCI.Types.ResponseEndBlock) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.EndBlock;
      }
    }

    private object value_;
    /// <summary>Enum of possible cases for the "value" oneof.</summary>
    public enum ValueOneofCase {
      None = 0,
      Exception = 1,
      Echo = 2,
      Flush = 3,
      Info = 4,
      SetOption = 5,
      DeliverTx = 6,
      CheckTx = 7,
      Commit = 8,
      Query = 9,
      InitChain = 10,
      BeginBlock = 11,
      EndBlock = 12,
    }
    private ValueOneofCase valueCase_ = ValueOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueOneofCase ValueCase {
      get { return valueCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      valueCase_ = ValueOneofCase.None;
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Exception, other.Exception)) return false;
      if (!object.Equals(Echo, other.Echo)) return false;
      if (!object.Equals(Flush, other.Flush)) return false;
      if (!object.Equals(Info, other.Info)) return false;
      if (!object.Equals(SetOption, other.SetOption)) return false;
      if (!object.Equals(DeliverTx, other.DeliverTx)) return false;
      if (!object.Equals(CheckTx, other.CheckTx)) return false;
      if (!object.Equals(Commit, other.Commit)) return false;
      if (!object.Equals(Query, other.Query)) return false;
      if (!object.Equals(InitChain, other.InitChain)) return false;
      if (!object.Equals(BeginBlock, other.BeginBlock)) return false;
      if (!object.Equals(EndBlock, other.EndBlock)) return false;
      if (ValueCase != other.ValueCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (valueCase_ == ValueOneofCase.Exception) hash ^= Exception.GetHashCode();
      if (valueCase_ == ValueOneofCase.Echo) hash ^= Echo.GetHashCode();
      if (valueCase_ == ValueOneofCase.Flush) hash ^= Flush.GetHashCode();
      if (valueCase_ == ValueOneofCase.Info) hash ^= Info.GetHashCode();
      if (valueCase_ == ValueOneofCase.SetOption) hash ^= SetOption.GetHashCode();
      if (valueCase_ == ValueOneofCase.DeliverTx) hash ^= DeliverTx.GetHashCode();
      if (valueCase_ == ValueOneofCase.CheckTx) hash ^= CheckTx.GetHashCode();
      if (valueCase_ == ValueOneofCase.Commit) hash ^= Commit.GetHashCode();
      if (valueCase_ == ValueOneofCase.Query) hash ^= Query.GetHashCode();
      if (valueCase_ == ValueOneofCase.InitChain) hash ^= InitChain.GetHashCode();
      if (valueCase_ == ValueOneofCase.BeginBlock) hash ^= BeginBlock.GetHashCode();
      if (valueCase_ == ValueOneofCase.EndBlock) hash ^= EndBlock.GetHashCode();
      hash ^= (int) valueCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (valueCase_ == ValueOneofCase.Exception) {
        output.WriteRawTag(10);
        output.WriteMessage(Exception);
      }
      if (valueCase_ == ValueOneofCase.Echo) {
        output.WriteRawTag(18);
        output.WriteMessage(Echo);
      }
      if (valueCase_ == ValueOneofCase.Flush) {
        output.WriteRawTag(26);
        output.WriteMessage(Flush);
      }
      if (valueCase_ == ValueOneofCase.Info) {
        output.WriteRawTag(34);
        output.WriteMessage(Info);
      }
      if (valueCase_ == ValueOneofCase.SetOption) {
        output.WriteRawTag(42);
        output.WriteMessage(SetOption);
      }
      if (valueCase_ == ValueOneofCase.DeliverTx) {
        output.WriteRawTag(50);
        output.WriteMessage(DeliverTx);
      }
      if (valueCase_ == ValueOneofCase.CheckTx) {
        output.WriteRawTag(58);
        output.WriteMessage(CheckTx);
      }
      if (valueCase_ == ValueOneofCase.Commit) {
        output.WriteRawTag(66);
        output.WriteMessage(Commit);
      }
      if (valueCase_ == ValueOneofCase.Query) {
        output.WriteRawTag(74);
        output.WriteMessage(Query);
      }
      if (valueCase_ == ValueOneofCase.InitChain) {
        output.WriteRawTag(82);
        output.WriteMessage(InitChain);
      }
      if (valueCase_ == ValueOneofCase.BeginBlock) {
        output.WriteRawTag(90);
        output.WriteMessage(BeginBlock);
      }
      if (valueCase_ == ValueOneofCase.EndBlock) {
        output.WriteRawTag(98);
        output.WriteMessage(EndBlock);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (valueCase_ == ValueOneofCase.Exception) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Exception);
      }
      if (valueCase_ == ValueOneofCase.Echo) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Echo);
      }
      if (valueCase_ == ValueOneofCase.Flush) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Flush);
      }
      if (valueCase_ == ValueOneofCase.Info) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (valueCase_ == ValueOneofCase.SetOption) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SetOption);
      }
      if (valueCase_ == ValueOneofCase.DeliverTx) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeliverTx);
      }
      if (valueCase_ == ValueOneofCase.CheckTx) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CheckTx);
      }
      if (valueCase_ == ValueOneofCase.Commit) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Commit);
      }
      if (valueCase_ == ValueOneofCase.Query) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Query);
      }
      if (valueCase_ == ValueOneofCase.InitChain) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InitChain);
      }
      if (valueCase_ == ValueOneofCase.BeginBlock) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BeginBlock);
      }
      if (valueCase_ == ValueOneofCase.EndBlock) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndBlock);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Response other) {
      if (other == null) {
        return;
      }
      switch (other.ValueCase) {
        case ValueOneofCase.Exception:
          Exception = other.Exception;
          break;
        case ValueOneofCase.Echo:
          Echo = other.Echo;
          break;
        case ValueOneofCase.Flush:
          Flush = other.Flush;
          break;
        case ValueOneofCase.Info:
          Info = other.Info;
          break;
        case ValueOneofCase.SetOption:
          SetOption = other.SetOption;
          break;
        case ValueOneofCase.DeliverTx:
          DeliverTx = other.DeliverTx;
          break;
        case ValueOneofCase.CheckTx:
          CheckTx = other.CheckTx;
          break;
        case ValueOneofCase.Commit:
          Commit = other.Commit;
          break;
        case ValueOneofCase.Query:
          Query = other.Query;
          break;
        case ValueOneofCase.InitChain:
          InitChain = other.InitChain;
          break;
        case ValueOneofCase.BeginBlock:
          BeginBlock = other.BeginBlock;
          break;
        case ValueOneofCase.EndBlock:
          EndBlock = other.EndBlock;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Tendermint.ABCI.Types.ResponseException subBuilder = new global::Tendermint.ABCI.Types.ResponseException();
            if (valueCase_ == ValueOneofCase.Exception) {
              subBuilder.MergeFrom(Exception);
            }
            input.ReadMessage(subBuilder);
            Exception = subBuilder;
            break;
          }
          case 18: {
            global::Tendermint.ABCI.Types.ResponseEcho subBuilder = new global::Tendermint.ABCI.Types.ResponseEcho();
            if (valueCase_ == ValueOneofCase.Echo) {
              subBuilder.MergeFrom(Echo);
            }
            input.ReadMessage(subBuilder);
            Echo = subBuilder;
            break;
          }
          case 26: {
            global::Tendermint.ABCI.Types.ResponseFlush subBuilder = new global::Tendermint.ABCI.Types.ResponseFlush();
            if (valueCase_ == ValueOneofCase.Flush) {
              subBuilder.MergeFrom(Flush);
            }
            input.ReadMessage(subBuilder);
            Flush = subBuilder;
            break;
          }
          case 34: {
            global::Tendermint.ABCI.Types.ResponseInfo subBuilder = new global::Tendermint.ABCI.Types.ResponseInfo();
            if (valueCase_ == ValueOneofCase.Info) {
              subBuilder.MergeFrom(Info);
            }
            input.ReadMessage(subBuilder);
            Info = subBuilder;
            break;
          }
          case 42: {
            global::Tendermint.ABCI.Types.ResponseSetOption subBuilder = new global::Tendermint.ABCI.Types.ResponseSetOption();
            if (valueCase_ == ValueOneofCase.SetOption) {
              subBuilder.MergeFrom(SetOption);
            }
            input.ReadMessage(subBuilder);
            SetOption = subBuilder;
            break;
          }
          case 50: {
            global::Tendermint.ABCI.Types.ResponseDeliverTx subBuilder = new global::Tendermint.ABCI.Types.ResponseDeliverTx();
            if (valueCase_ == ValueOneofCase.DeliverTx) {
              subBuilder.MergeFrom(DeliverTx);
            }
            input.ReadMessage(subBuilder);
            DeliverTx = subBuilder;
            break;
          }
          case 58: {
            global::Tendermint.ABCI.Types.ResponseCheckTx subBuilder = new global::Tendermint.ABCI.Types.ResponseCheckTx();
            if (valueCase_ == ValueOneofCase.CheckTx) {
              subBuilder.MergeFrom(CheckTx);
            }
            input.ReadMessage(subBuilder);
            CheckTx = subBuilder;
            break;
          }
          case 66: {
            global::Tendermint.ABCI.Types.ResponseCommit subBuilder = new global::Tendermint.ABCI.Types.ResponseCommit();
            if (valueCase_ == ValueOneofCase.Commit) {
              subBuilder.MergeFrom(Commit);
            }
            input.ReadMessage(subBuilder);
            Commit = subBuilder;
            break;
          }
          case 74: {
            global::Tendermint.ABCI.Types.ResponseQuery subBuilder = new global::Tendermint.ABCI.Types.ResponseQuery();
            if (valueCase_ == ValueOneofCase.Query) {
              subBuilder.MergeFrom(Query);
            }
            input.ReadMessage(subBuilder);
            Query = subBuilder;
            break;
          }
          case 82: {
            global::Tendermint.ABCI.Types.ResponseInitChain subBuilder = new global::Tendermint.ABCI.Types.ResponseInitChain();
            if (valueCase_ == ValueOneofCase.InitChain) {
              subBuilder.MergeFrom(InitChain);
            }
            input.ReadMessage(subBuilder);
            InitChain = subBuilder;
            break;
          }
          case 90: {
            global::Tendermint.ABCI.Types.ResponseBeginBlock subBuilder = new global::Tendermint.ABCI.Types.ResponseBeginBlock();
            if (valueCase_ == ValueOneofCase.BeginBlock) {
              subBuilder.MergeFrom(BeginBlock);
            }
            input.ReadMessage(subBuilder);
            BeginBlock = subBuilder;
            break;
          }
          case 98: {
            global::Tendermint.ABCI.Types.ResponseEndBlock subBuilder = new global::Tendermint.ABCI.Types.ResponseEndBlock();
            if (valueCase_ == ValueOneofCase.EndBlock) {
              subBuilder.MergeFrom(EndBlock);
            }
            input.ReadMessage(subBuilder);
            EndBlock = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResponseException : pb::IMessage<ResponseException> {
    private static readonly pb::MessageParser<ResponseException> _parser = new pb::MessageParser<ResponseException>(() => new ResponseException());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResponseException> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tendermint.ABCI.Types.TypesReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseException() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseException(ResponseException other) : this() {
      error_ = other.error_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseException Clone() {
      return new ResponseException(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResponseException);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResponseException other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Error != other.Error) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Error.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResponseException other) {
      if (other == null) {
        return;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResponseEcho : pb::IMessage<ResponseEcho> {
    private static readonly pb::MessageParser<ResponseEcho> _parser = new pb::MessageParser<ResponseEcho>(() => new ResponseEcho());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResponseEcho> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tendermint.ABCI.Types.TypesReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseEcho() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseEcho(ResponseEcho other) : this() {
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseEcho Clone() {
      return new ResponseEcho(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResponseEcho);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResponseEcho other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResponseEcho other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResponseFlush : pb::IMessage<ResponseFlush> {
    private static readonly pb::MessageParser<ResponseFlush> _parser = new pb::MessageParser<ResponseFlush>(() => new ResponseFlush());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResponseFlush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tendermint.ABCI.Types.TypesReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseFlush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseFlush(ResponseFlush other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseFlush Clone() {
      return new ResponseFlush(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResponseFlush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResponseFlush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResponseFlush other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ResponseInfo : pb::IMessage<ResponseInfo> {
    private static readonly pb::MessageParser<ResponseInfo> _parser = new pb::MessageParser<ResponseInfo>(() => new ResponseInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResponseInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tendermint.ABCI.Types.TypesReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseInfo(ResponseInfo other) : this() {
      data_ = other.data_;
      version_ = other.version_;
      lastBlockHeight_ = other.lastBlockHeight_;
      lastBlockAppHash_ = other.lastBlockAppHash_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseInfo Clone() {
      return new ResponseInfo(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private string data_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_block_height" field.</summary>
    public const int LastBlockHeightFieldNumber = 3;
    private ulong lastBlockHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LastBlockHeight {
      get { return lastBlockHeight_; }
      set {
        lastBlockHeight_ = value;
      }
    }

    /// <summary>Field number for the "last_block_app_hash" field.</summary>
    public const int LastBlockAppHashFieldNumber = 4;
    private pb::ByteString lastBlockAppHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString LastBlockAppHash {
      get { return lastBlockAppHash_; }
      set {
        lastBlockAppHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResponseInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResponseInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      if (Version != other.Version) return false;
      if (LastBlockHeight != other.LastBlockHeight) return false;
      if (LastBlockAppHash != other.LastBlockAppHash) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (LastBlockHeight != 0UL) hash ^= LastBlockHeight.GetHashCode();
      if (LastBlockAppHash.Length != 0) hash ^= LastBlockAppHash.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Data);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Version);
      }
      if (LastBlockHeight != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(LastBlockHeight);
      }
      if (LastBlockAppHash.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(LastBlockAppHash);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (LastBlockHeight != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LastBlockHeight);
      }
      if (LastBlockAppHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(LastBlockAppHash);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResponseInfo other) {
      if (other == null) {
        return;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.LastBlockHeight != 0UL) {
        LastBlockHeight = other.LastBlockHeight;
      }
      if (other.LastBlockAppHash.Length != 0) {
        LastBlockAppHash = other.LastBlockAppHash;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Data = input.ReadString();
            break;
          }
          case 18: {
            Version = input.ReadString();
            break;
          }
          case 24: {
            LastBlockHeight = input.ReadUInt64();
            break;
          }
          case 34: {
            LastBlockAppHash = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResponseSetOption : pb::IMessage<ResponseSetOption> {
    private static readonly pb::MessageParser<ResponseSetOption> _parser = new pb::MessageParser<ResponseSetOption>(() => new ResponseSetOption());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResponseSetOption> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tendermint.ABCI.Types.TypesReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseSetOption() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseSetOption(ResponseSetOption other) : this() {
      log_ = other.log_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseSetOption Clone() {
      return new ResponseSetOption(this);
    }

    /// <summary>Field number for the "log" field.</summary>
    public const int LogFieldNumber = 1;
    private string log_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Log {
      get { return log_; }
      set {
        log_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResponseSetOption);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResponseSetOption other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Log != other.Log) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Log.Length != 0) hash ^= Log.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Log.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Log);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Log.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Log);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResponseSetOption other) {
      if (other == null) {
        return;
      }
      if (other.Log.Length != 0) {
        Log = other.Log;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Log = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResponseDeliverTx : pb::IMessage<ResponseDeliverTx> {
    private static readonly pb::MessageParser<ResponseDeliverTx> _parser = new pb::MessageParser<ResponseDeliverTx>(() => new ResponseDeliverTx());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResponseDeliverTx> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tendermint.ABCI.Types.TypesReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseDeliverTx() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseDeliverTx(ResponseDeliverTx other) : this() {
      code_ = other.code_;
      data_ = other.data_;
      log_ = other.log_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseDeliverTx Clone() {
      return new ResponseDeliverTx(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Tendermint.ABCI.Types.CodeType code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tendermint.ABCI.Types.CodeType Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "log" field.</summary>
    public const int LogFieldNumber = 3;
    private string log_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Log {
      get { return log_; }
      set {
        log_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResponseDeliverTx);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResponseDeliverTx other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Data != other.Data) return false;
      if (Log != other.Log) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (Log.Length != 0) hash ^= Log.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
      if (Log.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Log);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (Log.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Log);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResponseDeliverTx other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.Log.Length != 0) {
        Log = other.Log;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            code_ = (global::Tendermint.ABCI.Types.CodeType) input.ReadEnum();
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
          case 26: {
            Log = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResponseCheckTx : pb::IMessage<ResponseCheckTx> {
    private static readonly pb::MessageParser<ResponseCheckTx> _parser = new pb::MessageParser<ResponseCheckTx>(() => new ResponseCheckTx());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResponseCheckTx> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tendermint.ABCI.Types.TypesReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseCheckTx() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseCheckTx(ResponseCheckTx other) : this() {
      code_ = other.code_;
      data_ = other.data_;
      log_ = other.log_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseCheckTx Clone() {
      return new ResponseCheckTx(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Tendermint.ABCI.Types.CodeType code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tendermint.ABCI.Types.CodeType Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "log" field.</summary>
    public const int LogFieldNumber = 3;
    private string log_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Log {
      get { return log_; }
      set {
        log_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResponseCheckTx);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResponseCheckTx other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Data != other.Data) return false;
      if (Log != other.Log) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (Log.Length != 0) hash ^= Log.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
      if (Log.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Log);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (Log.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Log);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResponseCheckTx other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.Log.Length != 0) {
        Log = other.Log;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            code_ = (global::Tendermint.ABCI.Types.CodeType) input.ReadEnum();
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
          case 26: {
            Log = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResponseQuery : pb::IMessage<ResponseQuery> {
    private static readonly pb::MessageParser<ResponseQuery> _parser = new pb::MessageParser<ResponseQuery>(() => new ResponseQuery());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResponseQuery> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tendermint.ABCI.Types.TypesReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseQuery() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseQuery(ResponseQuery other) : this() {
      code_ = other.code_;
      index_ = other.index_;
      key_ = other.key_;
      value_ = other.value_;
      proof_ = other.proof_;
      height_ = other.height_;
      log_ = other.log_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseQuery Clone() {
      return new ResponseQuery(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Tendermint.ABCI.Types.CodeType code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tendermint.ABCI.Types.CodeType Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private long index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 3;
    private pb::ByteString key_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 4;
    private pb::ByteString value_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "proof" field.</summary>
    public const int ProofFieldNumber = 5;
    private pb::ByteString proof_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Proof {
      get { return proof_; }
      set {
        proof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 6;
    private ulong height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "log" field.</summary>
    public const int LogFieldNumber = 7;
    private string log_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Log {
      get { return log_; }
      set {
        log_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResponseQuery);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResponseQuery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Index != other.Index) return false;
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      if (Proof != other.Proof) return false;
      if (Height != other.Height) return false;
      if (Log != other.Log) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Index != 0L) hash ^= Index.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (Proof.Length != 0) hash ^= Proof.GetHashCode();
      if (Height != 0UL) hash ^= Height.GetHashCode();
      if (Log.Length != 0) hash ^= Log.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (Index != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Index);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Value);
      }
      if (Proof.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Proof);
      }
      if (Height != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(Height);
      }
      if (Log.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Log);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (Index != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Index);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
      }
      if (Proof.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Proof);
      }
      if (Height != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Height);
      }
      if (Log.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Log);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResponseQuery other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Index != 0L) {
        Index = other.Index;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.Proof.Length != 0) {
        Proof = other.Proof;
      }
      if (other.Height != 0UL) {
        Height = other.Height;
      }
      if (other.Log.Length != 0) {
        Log = other.Log;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            code_ = (global::Tendermint.ABCI.Types.CodeType) input.ReadEnum();
            break;
          }
          case 16: {
            Index = input.ReadInt64();
            break;
          }
          case 26: {
            Key = input.ReadBytes();
            break;
          }
          case 34: {
            Value = input.ReadBytes();
            break;
          }
          case 42: {
            Proof = input.ReadBytes();
            break;
          }
          case 48: {
            Height = input.ReadUInt64();
            break;
          }
          case 58: {
            Log = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResponseCommit : pb::IMessage<ResponseCommit> {
    private static readonly pb::MessageParser<ResponseCommit> _parser = new pb::MessageParser<ResponseCommit>(() => new ResponseCommit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResponseCommit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tendermint.ABCI.Types.TypesReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseCommit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseCommit(ResponseCommit other) : this() {
      code_ = other.code_;
      data_ = other.data_;
      log_ = other.log_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseCommit Clone() {
      return new ResponseCommit(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Tendermint.ABCI.Types.CodeType code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tendermint.ABCI.Types.CodeType Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "log" field.</summary>
    public const int LogFieldNumber = 3;
    private string log_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Log {
      get { return log_; }
      set {
        log_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResponseCommit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResponseCommit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Data != other.Data) return false;
      if (Log != other.Log) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (Log.Length != 0) hash ^= Log.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
      if (Log.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Log);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (Log.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Log);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResponseCommit other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.Log.Length != 0) {
        Log = other.Log;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            code_ = (global::Tendermint.ABCI.Types.CodeType) input.ReadEnum();
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
          case 26: {
            Log = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResponseInitChain : pb::IMessage<ResponseInitChain> {
    private static readonly pb::MessageParser<ResponseInitChain> _parser = new pb::MessageParser<ResponseInitChain>(() => new ResponseInitChain());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResponseInitChain> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tendermint.ABCI.Types.TypesReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseInitChain() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseInitChain(ResponseInitChain other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseInitChain Clone() {
      return new ResponseInitChain(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResponseInitChain);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResponseInitChain other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResponseInitChain other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ResponseBeginBlock : pb::IMessage<ResponseBeginBlock> {
    private static readonly pb::MessageParser<ResponseBeginBlock> _parser = new pb::MessageParser<ResponseBeginBlock>(() => new ResponseBeginBlock());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResponseBeginBlock> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tendermint.ABCI.Types.TypesReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseBeginBlock() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseBeginBlock(ResponseBeginBlock other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseBeginBlock Clone() {
      return new ResponseBeginBlock(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResponseBeginBlock);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResponseBeginBlock other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResponseBeginBlock other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ResponseEndBlock : pb::IMessage<ResponseEndBlock> {
    private static readonly pb::MessageParser<ResponseEndBlock> _parser = new pb::MessageParser<ResponseEndBlock>(() => new ResponseEndBlock());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResponseEndBlock> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tendermint.ABCI.Types.TypesReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseEndBlock() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseEndBlock(ResponseEndBlock other) : this() {
      diffs_ = other.diffs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseEndBlock Clone() {
      return new ResponseEndBlock(this);
    }

    /// <summary>Field number for the "diffs" field.</summary>
    public const int DiffsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tendermint.ABCI.Types.Validator> _repeated_diffs_codec
        = pb::FieldCodec.ForMessage(10, global::Tendermint.ABCI.Types.Validator.Parser);
    private readonly pbc::RepeatedField<global::Tendermint.ABCI.Types.Validator> diffs_ = new pbc::RepeatedField<global::Tendermint.ABCI.Types.Validator>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tendermint.ABCI.Types.Validator> Diffs {
      get { return diffs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResponseEndBlock);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResponseEndBlock other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!diffs_.Equals(other.diffs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= diffs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      diffs_.WriteTo(output, _repeated_diffs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += diffs_.CalculateSize(_repeated_diffs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResponseEndBlock other) {
      if (other == null) {
        return;
      }
      diffs_.Add(other.diffs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            diffs_.AddEntriesFrom(input, _repeated_diffs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Header : pb::IMessage<Header> {
    private static readonly pb::MessageParser<Header> _parser = new pb::MessageParser<Header>(() => new Header());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Header> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tendermint.ABCI.Types.TypesReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Header() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Header(Header other) : this() {
      chainId_ = other.chainId_;
      height_ = other.height_;
      time_ = other.time_;
      numTxs_ = other.numTxs_;
      LastBlockId = other.lastBlockId_ != null ? other.LastBlockId.Clone() : null;
      lastCommitHash_ = other.lastCommitHash_;
      dataHash_ = other.dataHash_;
      validatorsHash_ = other.validatorsHash_;
      appHash_ = other.appHash_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Header Clone() {
      return new Header(this);
    }

    /// <summary>Field number for the "chain_id" field.</summary>
    public const int ChainIdFieldNumber = 1;
    private string chainId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChainId {
      get { return chainId_; }
      set {
        chainId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private ulong height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private ulong time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "num_txs" field.</summary>
    public const int NumTxsFieldNumber = 4;
    private ulong numTxs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NumTxs {
      get { return numTxs_; }
      set {
        numTxs_ = value;
      }
    }

    /// <summary>Field number for the "last_block_id" field.</summary>
    public const int LastBlockIdFieldNumber = 5;
    private global::Tendermint.ABCI.Types.BlockID lastBlockId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tendermint.ABCI.Types.BlockID LastBlockId {
      get { return lastBlockId_; }
      set {
        lastBlockId_ = value;
      }
    }

    /// <summary>Field number for the "last_commit_hash" field.</summary>
    public const int LastCommitHashFieldNumber = 6;
    private pb::ByteString lastCommitHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString LastCommitHash {
      get { return lastCommitHash_; }
      set {
        lastCommitHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data_hash" field.</summary>
    public const int DataHashFieldNumber = 7;
    private pb::ByteString dataHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DataHash {
      get { return dataHash_; }
      set {
        dataHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "validators_hash" field.</summary>
    public const int ValidatorsHashFieldNumber = 8;
    private pb::ByteString validatorsHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ValidatorsHash {
      get { return validatorsHash_; }
      set {
        validatorsHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "app_hash" field.</summary>
    public const int AppHashFieldNumber = 9;
    private pb::ByteString appHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AppHash {
      get { return appHash_; }
      set {
        appHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Header);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Header other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChainId != other.ChainId) return false;
      if (Height != other.Height) return false;
      if (Time != other.Time) return false;
      if (NumTxs != other.NumTxs) return false;
      if (!object.Equals(LastBlockId, other.LastBlockId)) return false;
      if (LastCommitHash != other.LastCommitHash) return false;
      if (DataHash != other.DataHash) return false;
      if (ValidatorsHash != other.ValidatorsHash) return false;
      if (AppHash != other.AppHash) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChainId.Length != 0) hash ^= ChainId.GetHashCode();
      if (Height != 0UL) hash ^= Height.GetHashCode();
      if (Time != 0UL) hash ^= Time.GetHashCode();
      if (NumTxs != 0UL) hash ^= NumTxs.GetHashCode();
      if (lastBlockId_ != null) hash ^= LastBlockId.GetHashCode();
      if (LastCommitHash.Length != 0) hash ^= LastCommitHash.GetHashCode();
      if (DataHash.Length != 0) hash ^= DataHash.GetHashCode();
      if (ValidatorsHash.Length != 0) hash ^= ValidatorsHash.GetHashCode();
      if (AppHash.Length != 0) hash ^= AppHash.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChainId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChainId);
      }
      if (Height != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Height);
      }
      if (Time != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Time);
      }
      if (NumTxs != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(NumTxs);
      }
      if (lastBlockId_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(LastBlockId);
      }
      if (LastCommitHash.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(LastCommitHash);
      }
      if (DataHash.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(DataHash);
      }
      if (ValidatorsHash.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(ValidatorsHash);
      }
      if (AppHash.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(AppHash);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChainId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChainId);
      }
      if (Height != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Height);
      }
      if (Time != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Time);
      }
      if (NumTxs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NumTxs);
      }
      if (lastBlockId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastBlockId);
      }
      if (LastCommitHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(LastCommitHash);
      }
      if (DataHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DataHash);
      }
      if (ValidatorsHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ValidatorsHash);
      }
      if (AppHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AppHash);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Header other) {
      if (other == null) {
        return;
      }
      if (other.ChainId.Length != 0) {
        ChainId = other.ChainId;
      }
      if (other.Height != 0UL) {
        Height = other.Height;
      }
      if (other.Time != 0UL) {
        Time = other.Time;
      }
      if (other.NumTxs != 0UL) {
        NumTxs = other.NumTxs;
      }
      if (other.lastBlockId_ != null) {
        if (lastBlockId_ == null) {
          lastBlockId_ = new global::Tendermint.ABCI.Types.BlockID();
        }
        LastBlockId.MergeFrom(other.LastBlockId);
      }
      if (other.LastCommitHash.Length != 0) {
        LastCommitHash = other.LastCommitHash;
      }
      if (other.DataHash.Length != 0) {
        DataHash = other.DataHash;
      }
      if (other.ValidatorsHash.Length != 0) {
        ValidatorsHash = other.ValidatorsHash;
      }
      if (other.AppHash.Length != 0) {
        AppHash = other.AppHash;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ChainId = input.ReadString();
            break;
          }
          case 16: {
            Height = input.ReadUInt64();
            break;
          }
          case 24: {
            Time = input.ReadUInt64();
            break;
          }
          case 32: {
            NumTxs = input.ReadUInt64();
            break;
          }
          case 42: {
            if (lastBlockId_ == null) {
              lastBlockId_ = new global::Tendermint.ABCI.Types.BlockID();
            }
            input.ReadMessage(lastBlockId_);
            break;
          }
          case 50: {
            LastCommitHash = input.ReadBytes();
            break;
          }
          case 58: {
            DataHash = input.ReadBytes();
            break;
          }
          case 66: {
            ValidatorsHash = input.ReadBytes();
            break;
          }
          case 74: {
            AppHash = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BlockID : pb::IMessage<BlockID> {
    private static readonly pb::MessageParser<BlockID> _parser = new pb::MessageParser<BlockID>(() => new BlockID());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockID> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tendermint.ABCI.Types.TypesReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockID() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockID(BlockID other) : this() {
      hash_ = other.hash_;
      Parts = other.parts_ != null ? other.Parts.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockID Clone() {
      return new BlockID(this);
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 1;
    private pb::ByteString hash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Hash {
      get { return hash_; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parts" field.</summary>
    public const int PartsFieldNumber = 2;
    private global::Tendermint.ABCI.Types.PartSetHeader parts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tendermint.ABCI.Types.PartSetHeader Parts {
      get { return parts_; }
      set {
        parts_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockID);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockID other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Hash != other.Hash) return false;
      if (!object.Equals(Parts, other.Parts)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      if (parts_ != null) hash ^= Parts.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Hash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Hash);
      }
      if (parts_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Parts);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
      }
      if (parts_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Parts);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockID other) {
      if (other == null) {
        return;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
      if (other.parts_ != null) {
        if (parts_ == null) {
          parts_ = new global::Tendermint.ABCI.Types.PartSetHeader();
        }
        Parts.MergeFrom(other.Parts);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Hash = input.ReadBytes();
            break;
          }
          case 18: {
            if (parts_ == null) {
              parts_ = new global::Tendermint.ABCI.Types.PartSetHeader();
            }
            input.ReadMessage(parts_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PartSetHeader : pb::IMessage<PartSetHeader> {
    private static readonly pb::MessageParser<PartSetHeader> _parser = new pb::MessageParser<PartSetHeader>(() => new PartSetHeader());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PartSetHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tendermint.ABCI.Types.TypesReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartSetHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartSetHeader(PartSetHeader other) : this() {
      total_ = other.total_;
      hash_ = other.hash_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartSetHeader Clone() {
      return new PartSetHeader(this);
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 1;
    private ulong total_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 2;
    private pb::ByteString hash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Hash {
      get { return hash_; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PartSetHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PartSetHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Total != other.Total) return false;
      if (Hash != other.Hash) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Total != 0UL) hash ^= Total.GetHashCode();
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Total != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Total);
      }
      if (Hash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Hash);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Total != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Total);
      }
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PartSetHeader other) {
      if (other == null) {
        return;
      }
      if (other.Total != 0UL) {
        Total = other.Total;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Total = input.ReadUInt64();
            break;
          }
          case 18: {
            Hash = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Validator : pb::IMessage<Validator> {
    private static readonly pb::MessageParser<Validator> _parser = new pb::MessageParser<Validator>(() => new Validator());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Validator> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tendermint.ABCI.Types.TypesReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Validator() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Validator(Validator other) : this() {
      pubKey_ = other.pubKey_;
      power_ = other.power_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Validator Clone() {
      return new Validator(this);
    }

    /// <summary>Field number for the "pubKey" field.</summary>
    public const int PubKeyFieldNumber = 1;
    private pb::ByteString pubKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PubKey {
      get { return pubKey_; }
      set {
        pubKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 2;
    private ulong power_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Validator);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Validator other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PubKey != other.PubKey) return false;
      if (Power != other.Power) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PubKey.Length != 0) hash ^= PubKey.GetHashCode();
      if (Power != 0UL) hash ^= Power.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PubKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PubKey);
      }
      if (Power != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Power);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PubKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PubKey);
      }
      if (Power != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Power);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Validator other) {
      if (other == null) {
        return;
      }
      if (other.PubKey.Length != 0) {
        PubKey = other.PubKey;
      }
      if (other.Power != 0UL) {
        Power = other.Power;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PubKey = input.ReadBytes();
            break;
          }
          case 16: {
            Power = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
